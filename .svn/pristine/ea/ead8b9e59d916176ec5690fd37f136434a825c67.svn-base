//
//  ghunterFindTaskViewController.m
//  ghunter
//
//  Created by imgondar on 15/7/14.
//  Copyright (c) 2015年 ghunter. All rights reserved.
//

#import "ghunterFindTaskViewController.h"
#import "Monitor.h"


#define TASK_SKILL_TYPE_NEAREST @"nearest"
#define TASK_SKILL_TYPE_LATEST @"latest"
#define TASK_SKILL_TYPE_PEICEHIGH @"pricehigh"
#define TASK_SKILL_TYPE_BOUNTHIGH @"bountyhigh"
#define TASK_SKILL_TYPE_HOTEST @"hotest"

@interface ghunterFindTaskViewController ()

@property(nonatomic,retain)NSString *taskType;
@property(nonatomic,retain)NSString *skillType;
@property (strong, nonatomic) IBOutlet UIImageView *filterImg;
//@property(nonatomic,assign)BOOL firstTimeShowTaskTableView;
@property(nonatomic,assign)BOOL firstTimeShowSkillTableView;
@property (weak, nonatomic) UIImageView *topBGSliderImageView;
@property (strong, nonatomic) IBOutlet UILabel *filterLabel;
@property (strong, nonatomic) IBOutlet UILabel *otherFilterLabel;
@property (weak, nonatomic) IBOutlet UILabel *FTTitle;


@property (strong, nonatomic) IBOutlet UIView *bg;
@end

@implementation ghunterFindTaskViewController
- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        
    }
    return self;
}

- (void)viewDidLoad {
    [super viewDidLoad];
     _bg.backgroundColor = Nav_backgroud;
    
    _FTTitle.text = _nametitle;
    self.tabBarController.tabBar.hidden = YES;
    NSNotificationCenter *center = [NSNotificationCenter defaultCenter];
    [center addObserver:self selector:@selector(changeImageCount:) name:SIAlertViewDidDismissNotification object:nil];
    NSNotificationCenter *centerTwo = [NSNotificationCenter defaultCenter];
    [centerTwo addObserver:self selector:@selector(change:) name:SIAlertViewWillShowNotification object:nil];
//    self.firstTimeShowTaskTableView = YES;

//    taskpage = 1;
    self.currentPage = 0;
    tmpNum = 0;
    
    flag = YES;
    self.filterLabel.hidden = NO;
    self.otherFilterLabel.hidden = YES;
    taskArray = [[NSMutableArray alloc] init];
    moreDataArray = [[NSMutableArray alloc] init];
//    self.findskillArray = [[NSMutableArray alloc] init];
    
    double latitude = [[NSUserDefaults standardUserDefaults] doubleForKey:LATITUDE];
    double longitude = [[NSUserDefaults standardUserDefaults] doubleForKey:LONGITUDE];
    [ghunterRequester setUserInfoWithKey:LATITUDE withValue:[NSString stringWithFormat:@"%f", latitude]];
    [ghunterRequester setUserInfoWithKey:LONGITUDE withValue:[NSString stringWithFormat:@"%f", longitude]];
    
    // 默认都是最新发布的任务
    self.skillType = TASK_SKILL_TYPE_LATEST;
    self.taskType = TASK_SKILL_TYPE_LATEST;
        
    
    // 获取任务列表
    [self didGetTotalTaskListIsloading:YES withPage:1 andType:self.taskType andCatalogID:_taskCid];
}

- (void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath
{
    
    if ([cell respondsToSelector:@selector(setSeparatorInset:)]) {
        
        [cell setSeparatorInset:UIEdgeInsetsZero];
    }
    
    if ([cell respondsToSelector:@selector(setLayoutMargins:)]) {
        
        [cell setLayoutMargins:UIEdgeInsetsZero];
    }
}


- (void)createTableView:(NSInteger) num {
    
    backScroll = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 104, mainScreenWidth, mainScreenheight - 104)];
    backScroll.contentSize = CGSizeMake(mainScreenWidth * num, mainScreenheight - 104);
    backScroll.bounces = NO;
    backScroll.showsHorizontalScrollIndicator = NO;
    backScroll.showsVerticalScrollIndicator = NO;
    backScroll.delegate = self;
    backScroll.pagingEnabled = YES;
    backScroll.backgroundColor = [UIColor clearColor];
    [self.view addSubview:backScroll];
    
    
    for (int i = 0; i < num; i++) {
        
        findTaskTableView = [[PullTableView alloc]initWithFrame:CGRectMake(i * mainScreenWidth, 0, mainScreenWidth, backScroll.frame.size.height)];
        findTaskTableView.delegate = self;
        findTaskTableView.dataSource = self;
        findTaskTableView.pullDelegate = self;
        UIView * footView = [[UIView alloc] initWithFrame:CGRectZero];
        footView.backgroundColor = [UIColor whiteColor];
        findTaskTableView.tableFooterView = footView;
        findTaskTableView.tag = 301 + i;
        findTaskTableView.showsVerticalScrollIndicator = NO;
        findTaskTableView.showsHorizontalScrollIndicator = NO;
        findTaskTableView.separatorColor = RGBCOLOR(235, 235, 235);
        findTaskTableView.backgroundColor = [UIColor clearColor];
        findTaskTableView.separatorStyle = UITableViewCellSeparatorStyleNone;
        [backScroll addSubview:findTaskTableView];

    }

}


#pragma mark --- 创建顶部滑动视图 ---
-(void)createTopScrollView:(NSInteger) num andWithCatalogs:(NSArray *) catalogsArr{
    
    topScrollView = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 64, mainScreenWidth, 30)];
    topScrollView.delegate = self;
    topScrollView.contentSize = CGSizeMake(num * 60, 0);
    topScrollView.showsHorizontalScrollIndicator = NO;
    topScrollView.showsHorizontalScrollIndicator = NO;
    topScrollView.pagingEnabled = YES;
    topScrollView.tag = 1001;
    topScrollView.bounces = YES;
    topScrollView.userInteractionEnabled = YES;
    topScrollView.backgroundColor = [UIColor whiteColor];
    [self.view addSubview:topScrollView];

    for (int i = 0; i < num; i++) {
        NSMutableArray * dataArray = [[NSMutableArray alloc] init];
//        [dataArray addObject:@"1"];
        [taskArray addObject:dataArray];
        
        NSMutableString * pageStr = [[NSMutableString alloc] initWithFormat:@"1"];
        [moreDataArray addObject:pageStr];
    }
    
    
    for (int i = 0; i < catalogsArr.count; i++) {
        
        topBtn = [[UIButton alloc] initWithFrame:CGRectMake(i * 60, 0, 60, 28.5)];
        NSDictionary * dict = [catalogsArr objectAtIndex:i];
        topBtn.tag = i + 101;
//        titleLb.backgroundColor = [UIColor redColor];
        [topBtn setTitle:[dict objectForKey:@"title"] forState:UIControlStateNormal];
        [topBtn setTitleColor:RGBCOLOR(153, 153, 153) forState:UIControlStateNormal];
        
        tmpLb = [[UILabel alloc] init];
        tmpLb.text = [dict objectForKey:@"cid"];
        tmpLb.tag = 201 + i;
        [topScrollView addSubview:tmpLb];
        if (i == 0) {
            [topBtn setTitleColor:RGBCOLOR(234, 85, 20) forState:UIControlStateNormal];
            notSelectLb = topBtn;
        }
        topBtn.userInteractionEnabled = YES;
        topBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
        topBtn.titleLabel.font = [UIFont systemFontOfSize:13];
        [topBtn addTarget:self action:@selector(taskScrollBtnClick:) forControlEvents:UIControlEventTouchUpInside];
        [topScrollView addSubview:topBtn];
        
    }
    
    self.redView = [[UIView alloc] initWithFrame:CGRectMake(0, topBtn.frame.size.height, 60, 1.5)];
    self.redView.backgroundColor = RGBCOLOR(234, 85, 20);
    [topScrollView addSubview:self.redView];
}

#pragma mark --- 点击 --- 
- (void) taskScrollBtnClick:(UIButton *) btn {
    
    
    NSInteger page = btn.tag - 101;
    
    // 点击会触发页面滑动事件，从而调用scrollViewDidScroll方法，造成重复加载
    // 解决方法，当点击radioButton的时候，增加标志位，scrollViewDidScroll不应该加载数据
    
    NSTimeInterval animationDuration = 0.20f;
    [UIView beginAnimations:@"ResizeForKeyboard" context:nil];
    [UIView setAnimationDuration:animationDuration];
    [backScroll setContentOffset:CGPointMake(mainScreenWidth * page, 0)];
    
    [UIView commitAnimations];
}



#pragma mark - 加载网络数据
// 获取总任务列表
-(void)didGetTotalTaskListIsloading:(BOOL )isloading withPage:(NSInteger)p andType:(NSString *)tp andCatalogID:(NSInteger)cid{
    if (isloading) {
        [self startLoad];
    }
    
    NSMutableDictionary *parameters = [[NSMutableDictionary alloc] init];
    [parameters setObject:[ghunterRequester getUserInfo:LATITUDE] forKey:@"latitude"];
    [parameters setObject:[ghunterRequester getUserInfo:LONGITUDE] forKey:@"longitude"];
    [parameters setObject:tp forKey:@"type"];
    [parameters setObject:[NSString stringWithFormat:@"%zd", p] forKey:@"page"];
    
    NSString *cidStr = [NSString stringWithFormat:@"%zd", cid];
    [parameters setObject:cidStr forKey:@"cid"];
    if (isloading) {
        [self endLoad];
    }
    PullTableView * table = (PullTableView *)[backScroll viewWithTag:301];

    [AFNetworkTool httpRequestWithUrl:URL_FIND_TASK params:parameters success:^(NSData *data) {
        
        NSError *error;
        NSDictionary *result = [NSJSONSerialization JSONObjectWithData:data options:0 error:&error];
        
        
        if ([[result objectForKey:@"error"]integerValue] == 0) {
//            if (p == 1) {
            
                NSArray * catalogsArray = [result valueForKey:@"catalogs"];
                [self createTopScrollView:[[result valueForKey:@"catalogs"] count] andWithCatalogs:catalogsArray];
                self.arrCount = [NSString stringWithFormat:@"%lu", (unsigned long)catalogsArray.count];
                
                
                [[taskArray objectAtIndex:self.currentPage.integerValue] removeAllObjects];
            
                pagesAdd = 2;
                [[moreDataArray objectAtIndex:self.currentPage.integerValue] setString:[NSString  stringWithFormat:@"%ld", (long)pagesAdd++]];
            
                NSArray *array = [result valueForKey:@"tasks"];
                [[taskArray objectAtIndex:0] addObjectsFromArray:array];
            
//                flag = NO;
                [self createTableView:[[result valueForKey:@"catalogs"] count]];
                [table reloadData];
//                //                if([self.findtaskArray count]>0)
//                //                {
//                //                    NSIndexPath *indexPath = [NSIndexPath indexPathForRow:0 inSection:0];
//                //                    [findTaskTableView scrollToRowAtIndexPath:indexPath atScrollPosition:UITableViewScrollPositionNone animated:NO];
//                //                }
//                findTaskTableView.pullTableIsRefreshing = NO;
//            }else{
//                taskpage++;
//                NSArray *array = [result valueForKey:@"tasks"];
//                [[taskArray objectAtIndex:0] addObjectsFromArray:array];
//                [findTaskTableView reloadData];
//                findTaskTableView.pullTableIsLoadingMore = NO;
//            }
        }else{
            
            [ProgressHUD show:[result objectForKey:@"msg"]];
            table.pullTableIsRefreshing = NO;
            table.pullTableIsLoadingMore = NO;
        }
    } fail:^{
        [ProgressHUD show:HTTPREQUEST_ERROR];
        if (isloading) {
            [self endLoad];
        }
        table.pullTableIsRefreshing = NO;
        table.pullTableIsLoadingMore = NO;
    }];
}


// 分类数据
-(void)didGetTaskListIsloading:(BOOL )isloading withPage:(NSInteger)p andType:(NSString *)tp andCatalogID:(NSInteger)cid{
    if (isloading) {
        [self startLoad];
    }
    
    NSMutableDictionary *parameters = [[NSMutableDictionary alloc] init];
    [parameters setObject:[ghunterRequester getUserInfo:LATITUDE] forKey:@"latitude"];
    [parameters setObject:[ghunterRequester getUserInfo:LONGITUDE] forKey:@"longitude"];
    [parameters setObject:tp forKey:@"type"];
    [parameters setObject:[NSString stringWithFormat:@"%zd", p] forKey:@"page"];
    
    NSString *cidStr = [NSString stringWithFormat:@"%zd", cid];
    [parameters setObject:cidStr forKey:@"cid"];
    
    PullTableView * table = (PullTableView *)[backScroll viewWithTag:self.currentPage.integerValue + 301];

    [AFNetworkTool httpRequestWithUrl:URL_FIND_TASK params:parameters success:^(NSData *data) {
        if (isloading) {
            [self endLoad];
        }
        NSError *error;
        NSDictionary *result = [NSJSONSerialization JSONObjectWithData:data options:0 error:&error];
        
        if ([[result objectForKey:@"error"]integerValue] == 0) {
            if (p == 1) {
    
                [[taskArray objectAtIndex:self.currentPage.integerValue] removeAllObjects];
                
                pagesAdd = 2;
                [[moreDataArray objectAtIndex:self.currentPage.integerValue] setString:[NSString  stringWithFormat:@"%ld", (long)pagesAdd++]];
                
                NSArray *array = [result valueForKey:@"tasks"];
                [[taskArray objectAtIndex:self.currentPage.integerValue] addObjectsFromArray:array];
                
                [table reloadData];

                table.pullTableIsRefreshing = NO;
            }else{
                pagesAdd++;
                NSArray *array = [result valueForKey:@"tasks"];
                [[taskArray objectAtIndex:self.currentPage.integerValue] addObjectsFromArray:array];
                [table reloadData];
                table.pullTableIsLoadingMore = NO;
            }
        }else{
            
            if ([[result objectForKey:@"msg"] isEqualToString:@"暂无任务"]) {
                [[taskArray objectAtIndex:self.currentPage.integerValue] removeAllObjects];
                [table reloadData];
            }
            
            [ProgressHUD show:[result objectForKey:@"msg"]];
            table.pullTableIsRefreshing = NO;
            table.pullTableIsLoadingMore = NO;
            
        }
    } fail:^{
        [ProgressHUD show:HTTPREQUEST_ERROR];
        if (isloading) {
            [self endLoad];
        }
        table.pullTableIsRefreshing = NO;
        table.pullTableIsLoadingMore = NO;
    }];
}

-(NSString *)getFilterName:(NSString *)filterType{
    if ([filterType isEqualToString:TASK_SKILL_TYPE_NEAREST]) {
        return @"最新";
    }else if([filterType isEqualToString:TASK_SKILL_TYPE_LATEST]){
        return @"最新";
    }else if([filterType isEqualToString:TASK_SKILL_TYPE_HOTEST]){
        return @"最热";
    }else if([filterType isEqualToString:TASK_SKILL_TYPE_BOUNTHIGH]){
        return @"赏金";
    }else if([filterType isEqualToString:TASK_SKILL_TYPE_PEICEHIGH]){
        return @"售价";
    }
    return  @"最近";
}

- (void)change:(NSNotification *)notidi
{
    self.filterImg.image = [UIImage imageNamed:@"nearby_filter_dropdown_normal"];
}
- (void)changeImageCount:(NSNotification *)noti
{
    self.filterImg.image = [UIImage imageNamed:@"nearby_filter_normal"];
}

- (void)viewWillAppear:(BOOL)animated {
    // 这样才能右滑返回上一个页面
    self.tabBarController.tabBar.hidden = YES;
    self.navigationController.navigationBarHidden = YES;
//    self.navigationController.navigationBar.alpha = 0;
    [self.navigationController.view sendSubviewToBack:self.navigationController.navigationBar];

    [[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleLightContent animated:YES];
    [[UIApplication sharedApplication] setStatusBarHidden:NO withAnimation:UIStatusBarAnimationFade];
    
}

- (void)viewDidAppear:(BOOL)animated {
    
//    [findTaskTableView setFrame:CGRectMake(0, 64, mainScreenWidth, mainScreenheight - 64)];
//    self.firstTimeShowTaskTableView = NO;
}

-(void)viewWillDisappear:(BOOL)animated
{
    
}


- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
}

#pragma mark - IOS8 map

- (void)locationManager:(CLLocationManager *)manager didFailWithError:(NSError *)error
{
    [self endLoad];
}

#pragma mark - Baidu Map

- (void)mapView:(BMKMapView *)mapView didFailToLocateUserWithError:(NSError *)error{
    [self endLoad];
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"无法定位，请检查网络或到设置->隐私->定位服务->赏金猎人打开定位服务" message:nil delegate:self cancelButtonTitle:@"确定" otherButtonTitles:nil];
    [alert show];
}

#pragma mark - Custom Methods

- (void)iconTaped:(UITapGestureRecognizer *)sender {
    NSDictionary *task;
   
    task= [[taskArray objectAtIndex:self.currentPage.integerValue] objectAtIndex:sender.view.tag];
    
    ghunterUserCenterViewController *user = [[ghunterUserCenterViewController alloc] init];
    
    user.uid = [[task objectForKey:@"owner"] objectForKey:@"uid"];
    
    [self.navigationController pushViewController:user animated:YES];
}

- (void)startLoad{
    self.loadingView = [[ghunterLoadingView alloc] initWithSuperView:self.view withGif:@"loading2" withIndicator:@"正在加载..."];
    [self.loadingView startAnimition];
}

- (void)endLoad{
    [self.loadingView inValidate];
}


#pragma mark --- UIscrollviewDelegate
-(void)scrollViewDidScroll:(UIScrollView *)scrollView {
    
    CGFloat pageWidth = backScroll.frame.size.width;
    int page = floor(backScroll.contentOffset.x / pageWidth);
    UIButton * btn = (UIButton *)[topScrollView viewWithTag:101 + page];
    if (btn != notSelectLb) {
        
        [notSelectLb setTitleColor:RGBCOLOR(137, 137, 137) forState:UIControlStateNormal];
        [btn setTitleColor:RGBCOLOR(234, 85, 20) forState:UIControlStateNormal];
        notSelectLb = btn;
    }
    
    
    //    float bigX = scrollView.bounds.size.width / _btnScroll.bounds.size.width;
    float littleX = ((self.arrCount.integerValue) * 20) / (self.arrCount.integerValue * mainScreenWidth);
    
    CGRect frame = self.redView.frame;
    frame.size.width = topBtn.frame.size.width;
    frame.origin.x = btn.frame.origin.x;
    
    self.redView.frame = frame;
    topScrollView.contentOffset = CGPointMake(backScroll.contentOffset.x * littleX, backScroll.contentOffset.y);
}

- ( void )scrollViewDidEndDecelerating:( UIScrollView *)scrollView{
    
//    if (flag != YES) {
//        
//        [self createTableView:self.arrCount.integerValue];
//    }else {
    
        flag = NO;
        CGFloat pageWidth = backScroll.frame.size.width;
        int page = floor(backScroll.contentOffset.x / pageWidth);
        
        self.currentPage = [NSString stringWithFormat:@"%d", page];
        UILabel * cidLb = (UILabel *)[topScrollView viewWithTag:201 + page];
        
        if (self.currentPage.integerValue == 0) {
            return;
        }else if (self.currentPage.integerValue == page && tmpNum != page){
            [self didGetTaskListIsloading:YES withPage:1 andType:self.taskType andCatalogID:cidLb.text.integerValue];
        }
        
        tmpNum = page - 1;
//    }
}


- (IBAction)backButton:(UIButton *)sender {
    [self.navigationController popViewControllerAnimated:YES];
}


- (IBAction)filter {
    taskAlertView = [[SIAlertView alloc] initWithTitle:nil andMessage:nil];
    NSArray *nibs = [[NSBundle mainBundle] loadNibNamed:@"taskfiltertoView" owner:self options:nil];
    UIView *taskFilter = [[UIView alloc] init];
    taskFilter = [nibs objectAtIndex:0];
    
    CGRect taskfilterFrame = taskFilter.frame;
    taskfilterFrame.size.width = mainScreenWidth;
    taskFilter.frame = taskfilterFrame;
    
    taskAlertView.containerFrame=CGRectMake(0,64, taskfilterFrame.size.width, taskfilterFrame.size.height);
    taskAlertView.showView = taskFilter;
    taskAlertView.showView.layer.cornerRadius=0;
    UIButton *nearestBtn = (UIButton *)[taskFilter viewWithTag:1];
    UIButton *recentlyBtn = (UIButton *)[taskFilter viewWithTag:2];
    UIButton *moneyBtn = (UIButton *)[taskFilter viewWithTag:3];
    UIButton *hotBtn = (UIButton *)[taskFilter viewWithTag:4];
    UILabel* label1=(UILabel*)[taskFilter viewWithTag:5];
    if(scrollView.contentOffset.x==mainScreenWidth)
    {
        label1.text=@"售价最高";
    }
    else
    {
        label1.text=@"赏金最高";
    }
    [nearestBtn addTarget:self action:@selector(nearest:) forControlEvents:UIControlEventTouchUpInside];
    [recentlyBtn addTarget:self action:@selector(recently:) forControlEvents:UIControlEventTouchUpInside];
    [moneyBtn addTarget:self action:@selector(money:) forControlEvents:UIControlEventTouchUpInside];
    [hotBtn addTarget:self action:@selector(hot:) forControlEvents:UIControlEventTouchUpInside];
    taskAlertView.backgroundStyle = SIAlertViewBackgroundStyleSolid;
    taskAlertView.transitionStyle = SIAlertViewTransitionStyleFade;
    [taskAlertView show];
}

#pragma mark - filterClick
- (void)nearest:(id)sender {

        [MobClick event:UMEVENT_SNEAREST];
        self.taskType = TASK_SKILL_TYPE_NEAREST;
        pagesAdd = 1;
        [taskAlertView dismissAnimated:YES];
        self.filterLabel.text = @"最近";
        [self didGetTaskListIsloading:YES withPage:1 andType:self.taskType andCatalogID:_taskCid];
        
        // 本地保存用户默认筛选方式
        _filter4task = TASK_SKILL_TYPE_NEAREST;
        [[NSUserDefaults standardUserDefaults] setValue:TASK_SKILL_TYPE_NEAREST forKey:@"filter4task"];
    
    
    self.filterImg.image = [UIImage imageNamed:@"nearby_filter_normal"];
}

- (void)recently:(id)sender {

    [MobClick event:UMEVENT_SLATEST];
    self.taskType = TASK_SKILL_TYPE_LATEST;
    pagesAdd = 1;
    [taskAlertView dismissAnimated:YES];
    self.filterLabel.text = @"最新";
    [self didGetTaskListIsloading:YES withPage:1 andType:self.taskType andCatalogID:_taskCid];
        
    // 本地保存用户默认筛选方式
    _filter4task = TASK_SKILL_TYPE_LATEST;
    [[NSUserDefaults standardUserDefaults] setValue:TASK_SKILL_TYPE_LATEST forKey:@"filter4task"];
    
    self.filterImg.image = [UIImage imageNamed:@"nearby_filter_normal"];
}

- (void)money:(id)sender {
    
    [MobClick event:UMEVENT_SPRICE];
    self.taskType = TASK_SKILL_TYPE_BOUNTHIGH;
    pagesAdd = 1;
    self.filterLabel.text = @"赏金";
    [taskAlertView dismissAnimated:YES];
    [self didGetTaskListIsloading:YES withPage:1 andType:self.taskType andCatalogID:_taskCid];
        
    // 本地保存用户默认筛选方式
    _filter4task = TASK_SKILL_TYPE_BOUNTHIGH;
    [[NSUserDefaults standardUserDefaults] setValue:TASK_SKILL_TYPE_BOUNTHIGH forKey:@"filter4task"];
    self.filterImg.image = [UIImage imageNamed:@"nearby_filter_normal"];
}

- (void)hot:(id)sender {
    
    [MobClick event:UMEVENT_SHOTEST];
    self.taskType = TASK_SKILL_TYPE_HOTEST;
    pagesAdd = 1;
    [taskAlertView dismissAnimated:YES];
    self.filterLabel.text = @"最热";
    [self didGetTaskListIsloading:YES withPage:1 andType:self.taskType andCatalogID:_taskCid];
        
    // 本地保存用户默认筛选方式
    _filter4task = TASK_SKILL_TYPE_HOTEST;
    [[NSUserDefaults standardUserDefaults] setValue:TASK_SKILL_TYPE_HOTEST forKey:@"filter4task"];
    
    self.filterImg.image = [UIImage imageNamed:@"nearby_filter_normal"];
}



#pragma mark - UITableViewDelegate

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {

    ghuntertaskViewController *ghuntertask = [[ghuntertaskViewController alloc] init];
    NSDictionary *task = [[taskArray objectAtIndex:self.currentPage.integerValue] objectAtIndex:indexPath.row];
    ghuntertask.tid = [task objectForKey:@"tid"];
    ghuntertask.callBackBlock = ^{};
    [self.navigationController pushViewController:ghuntertask animated:YES];
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {

//    if (flag == YES) {
//        return 0;
//    }else {
        return [[taskArray objectAtIndex:self.currentPage.integerValue] count];
//    }
}

#pragma mark - UITableVIewDatasource

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
    UITableViewCell *cell = [self tableView:tableView cellForRowAtIndexPath:indexPath];
    return cell.bounds.size.height;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    static NSString *CellIdentifier = @"CellIdentifier";
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    if (!cell) {
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];
    }
    else {
        while ([cell.contentView.subviews lastObject]) {
            [[cell.contentView.subviews lastObject] removeFromSuperview];
        }
    }

    findTaskTableView.separatorStyle = UITableViewCellSeparatorStyleSingleLine;
    NSDictionary *task = [[taskArray objectAtIndex:self.currentPage.integerValue] objectAtIndex:indexPath.row];
    NSArray *nibs = [[NSBundle mainBundle] loadNibNamed:@"nearbyTaskCell" owner:self options:nil];
    cell = [nibs objectAtIndex:0];
    cell.selectionStyle = UITableViewCellSelectionStyleNone;
    NSDictionary *owner = [task objectForKey:@"owner"];
    
//    UILabel *title = (UILabel *)[cell viewWithTag:2];
//    OHAttributedLabel *bounty = (OHAttributedLabel *)[cell viewWithTag:3];
    UIImageView *huntericon = (UIImageView *)[cell viewWithTag:4];
    UILabel *distance = (UILabel *)[cell viewWithTag:5];
    UILabel *huntername = (UILabel *)[cell viewWithTag:6];
    UILabel *dateline = (UILabel *)[cell viewWithTag:7];
    UILabel *bidnum = (UILabel *)[cell viewWithTag:8];
    UILabel *hot = (UILabel *)[cell viewWithTag:9];
    UIImageView *gender = (UIImageView *)[cell viewWithTag:10];
    UIView* ageview=(UIView*)[cell viewWithTag:54];
    tabbartxt  = (UILabel *)[cell viewWithTag:110];
    
    ageview.layer.cornerRadius = 2.0;
//        NSString *titleStr = [task objectForKey:@"title"];
//        CGRect titleFrame = title.frame;
    
    huntericon.clipsToBounds = YES;
    huntericon.layer.cornerRadius = 25;
    [huntericon sd_setImageWithURL:[owner objectForKey:@"middle_avatar"] placeholderImage:[UIImage imageNamed:@"avatar"]];
    huntericon.userInteractionEnabled = YES;
    huntericon.tag = indexPath.row;
    UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(iconTaped:)];
    [huntericon addGestureRecognizer:tap];
        
        // 计算距离
    NSString *distancestar = [ghunterRequester calculateDistanceWithLatitude:[task objectForKey:@"latitude"] withLongitude:[task objectForKey:@"longitude"]];
        
    [distance setText:distancestar];
//        NSString *nameStr = [owner objectForKey:@"username"];
//        CGSize nameSize = [nameStr sizeWithFont:huntername.font];
    CGRect nameFrame = huntername.frame;
//        if (nameFrame.origin.x + nameSize.width > bountyImage.frame.origin.x) {
//            nameFrame.size.width = bountyImage.frame.origin.x - nameFrame.origin.x;
//        }
    nameFrame.origin.x = huntericon.frame.size.width + huntericon.frame.origin.x + 10;
    huntername.frame = nameFrame;
    [huntername setText:[owner objectForKey:@"username"]];
    [dateline setText:[ghunterRequester getTimeDescripton:[task objectForKey:@"dateline"]]];
    [bidnum setText:[NSString stringWithFormat:@"%@人竞标",[task objectForKey:@"biddingnum"]]];
    [hot setText:[NSString stringWithFormat:@"%@热度",[task objectForKey:@"hot"]]];
    if([[owner objectForKey:@"sex"] isEqualToString:@"0"]){
        [gender setImage:[UIImage imageNamed:@"female"]];
//            ageview.backgroundColor = RGBCOLOR(240, 136, 146);
    }else{
        [gender setImage:[UIImage imageNamed:@"male"]];
//           ageview.backgroundColor = RGBCOLOR(119, 158, 211);
    }
    CGRect genderFrame = gender.frame;
    genderFrame.origin.y = huntername.frame.size.height + huntername.frame.origin.y + 5;
    gender.frame = genderFrame;
    
    CGRect distanceFrame = distance.frame;
    distanceFrame.origin.y = gender.frame.origin.y - 3;
    distance.frame = distanceFrame;
    
    NSString *bountySelf = [task objectForKey:@"bounty"];
    NSString *bountyStr = [NSString stringWithFormat:@"%@元",bountySelf];
    UILabel * bounty = [[UILabel alloc] initWithFrame:CGRectMake(100, huntername.frame.origin.y + 5, 100, 20)];
    CGSize bountySize = [bountyStr sizeWithFont:bounty.font];
    [cell.contentView addSubview:bounty];
    bounty.text = bountyStr;
    bounty.font = [UIFont systemFontOfSize:12];
    bounty.textColor = RGBCOLOR(234, 85, 20);
    
    CGRect bountyFrame = bounty.frame;
    bountyFrame.size.width = bountySize.width;
    bountyFrame.origin.x = mainScreenWidth - bountySize.width - 10;
    bounty.frame = bountyFrame;
    
    UILabel * goldLabel = [[UILabel alloc] initWithFrame:CGRectMake(100, huntername.frame.origin.y, 26, 26)];
    [cell.contentView addSubview:goldLabel];
    goldLabel.text = @"赏";
    goldLabel.textAlignment = NSTextAlignmentCenter;
    goldLabel.textColor = RGBCOLOR(234, 85, 20);
    goldLabel.layer.cornerRadius = goldLabel.frame.size.width / 2;
    goldLabel.clipsToBounds = YES;
    [goldLabel.layer setBorderWidth:1.0f];
    goldLabel.font = [UIFont systemFontOfSize:12];
    [goldLabel.layer setBorderColor:RGBCOLOR(234, 85, 20).CGColor];

    // 赏字位置
    CGRect goldLbFrame = goldLabel.frame;
    goldLbFrame.origin.x = bounty.frame.origin.x - 10 - goldLbFrame.size.width;
    goldLbFrame.origin.y = huntername.frame.origin.y  + 3;
    goldLabel.frame = goldLbFrame;
    
    NSString *LENstr = [task objectForKey:@"c_name"];
    CGRect tabbartxtFrame = tabbartxt.frame;
    tabbartxtFrame.origin.x = huntericon.frame.size.width + huntericon.frame.origin.x + 10;
    if ([LENstr length]>1) {
        tabbartxtFrame.size.width =25;
        tabbartxtFrame.origin.y = distance.frame.origin.y + distance.frame.size.height + 5;
    }
    if ([LENstr length]>2) {
        tabbartxtFrame.size.width =35;
        tabbartxtFrame.origin.y =distance.frame.origin.y + distance.frame.size.height + 5;
    }
    if ([LENstr length]>3) {
        
        tabbartxtFrame.size.width = 45;
        tabbartxtFrame.origin.y = distance.frame.origin.y + distance.frame.size.height + 5;
    }
    tabbartxt.frame = tabbartxtFrame;

    
    NSString *titleStr = [task objectForKey:@"title"];
    // 内容
    UILabel * titleLb = [[UILabel alloc] initWithFrame:CGRectMake(huntername.frame.origin.x + tabbartxt.frame.size.width - 10, distance.frame.origin.y + distance.frame.size.height + 3, cell.frame.size.width / 2 + 50, 20)];
    [titleLb setFont:[UIFont systemFontOfSize:14]];
    titleLb.textColor = RGBCOLOR(51, 51, 51);
    titleLb.numberOfLines = 1;
    [titleLb setText:titleStr];
    [cell.contentView addSubview:titleLb];
    
    CGRect titleFrame = titleLb.frame;
    
    titleFrame.origin.x = tabbartxt.frame.size.width + tabbartxt.frame.origin.x + 5;
    titleLb.frame = titleFrame;

//    tabbartxt.textColor = [UIColor redColor];
    tabbartxt.text = [task objectForKey:@"c_name"];
    tabbartxt.font = [UIFont systemFontOfSize:11];
    tabbartxt.clipsToBounds = YES;
    tabbartxt.layer.cornerRadius = 3.0;
    [tabbartxt.layer setBorderWidth:1.0];   //边框宽度
    tabbartxt.textAlignment = NSTextAlignmentCenter;
//    [tabbartxt.layer setBorderColor:[UIColor redColor].CGColor];//边框颜色
    
    [self judgeTextColor:[task objectForKey:@"fcid"]];
    
    // 和名字对齐
    CGRect tabbartextLbFrame = tabbartxt.frame;
    tabbartextLbFrame.origin.x = huntername.frame.origin.x;
    tabbartextLbFrame.origin.y = distance.frame.origin.y + 20;
    
    tabbartxt.frame = tabbartextLbFrame;
    // 移除虚线
    UILabel * xuxianLb = (UILabel *)[cell viewWithTag:999];
    [xuxianLb removeFromSuperview];
    
    // 移动6个图标对齐
    UIImageView * bidImgV = (UIImageView *)[cell viewWithTag:91];
    UIImageView * hotImgV = (UIImageView *)[cell viewWithTag:92];
    UIImageView * timeImgV = (UIImageView *)[cell viewWithTag:93];
    
    CGRect bidImgVFrame = bidImgV.frame;
    CGRect hotImgVFrame = hotImgV.frame;
    CGRect timeImgVFrame = timeImgV.frame;
    CGRect bidnumFrame = bidnum.frame;
    CGRect hotLbFrame = hot.frame;
    CGRect timeLbFrame = dateline.frame;
    
    CGFloat height = tabbartxt.frame.size.height + tabbartxt.frame.origin.y + 6;
    
    bidImgVFrame.origin.x = tabbartxt.frame.origin.x;
    bidImgVFrame.origin.y = height;
    hotImgVFrame.origin.x = tabbartxt.frame.origin.x + 80;
    hotImgVFrame.origin.y = height;
    timeImgVFrame.origin.x =hotImgVFrame.origin.x + 90 - 20;
    timeImgVFrame.origin.y = height;
    
    bidnumFrame.origin.x = bidImgVFrame.origin.x + 14;
    bidnumFrame.origin.y = height - 3;
    hotLbFrame.origin.x = hotImgVFrame.origin.x + 14;
    hotLbFrame.origin.y = height - 3;
    timeLbFrame.origin.x = timeImgVFrame.origin.x + 14;
    timeLbFrame.origin.y = height - 3;
    
    bidImgV.frame = bidImgVFrame;
    hotImgV.frame = hotImgVFrame;
    timeImgV.frame = timeImgVFrame;
    bidnum.frame = bidnumFrame;
    hot.frame = hotLbFrame;
    dateline.frame = timeLbFrame;
    
    cell.backgroundColor = [UIColor whiteColor];
    
    CGRect cellFrame = cell.frame;
    cellFrame.size.height = bidImgV.frame.size.height + bidImgV.frame.origin.y + 10;
    cell.frame = cellFrame;
    return cell;
}

#pragma mark - PullTableViewDelegate

- (void)pullTableViewDidTriggerRefresh:(PullTableView *)pullTableView
{
    [self performSelector:@selector(refreshTable) withObject:nil afterDelay:0.1f];
}

- (void)pullTableViewDidTriggerLoadMore:(PullTableView *)pullTableView
{
    [self performSelector:@selector(loadMoreDataToTable) withObject:nil afterDelay:0.1f];
}

#pragma mark - Refresh and load more methods

- (void)refreshTable
{
//    taskpage = 1;
    UILabel * cidLb = (UILabel *)[topScrollView viewWithTag:201 + self.currentPage.integerValue];

    if (self.currentPage.integerValue == 0) {
        [self didGetTotalTaskListIsloading:NO withPage:1 andType:self.taskType andCatalogID:_taskCid];
    }else {
        [[taskArray objectAtIndex:self.currentPage.integerValue] removeAllObjects];
        [self didGetTaskListIsloading:NO withPage:1 andType:self.taskType andCatalogID:cidLb.text.integerValue];
    }
}

- (void)loadMoreDataToTable
{
    [self didGetTaskListIsloading:NO withPage:[[moreDataArray objectAtIndex:self.currentPage.integerValue] integerValue] andType:self.taskType andCatalogID:self.currentPage.integerValue];
}

#pragma mark  -UIAlertView delegate
- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex {
    if ([alertView tag] == 100) {
        [alertView dismissWithClickedButtonIndex:0 animated:YES];
        if (buttonIndex == 1) {
            NSURL *url = [[NSURL alloc] initWithString:[[NSUserDefaults standardUserDefaults] objectForKey:UPDATE_URL]];
            [[UIApplication sharedApplication] openURL:url];
        }
    }
}


#pragma mark --- 设置颜色
- (void) judgeTextColor:(NSString *) pcid {
    
    if ([pcid isEqualToString:@"2"]) {
        
        tabbartxt.textColor = [Monitor colorWithHexString:@"0x00b1cd" alpha:1.0f];
        [tabbartxt.layer setBorderColor:[Monitor colorWithHexString:@"0x00b1cd" alpha:1.0f].CGColor];//边框颜色
    }
    if ([pcid isEqualToString:@"5"]) {
        
        tabbartxt.textColor = [Monitor colorWithHexString:@"0xf79736" alpha:1.0f];
        [tabbartxt.layer setBorderColor:[Monitor colorWithHexString:@"0xf79736" alpha:1.0f].CGColor];//边框颜色
    }
    if ([pcid isEqualToString:@"8"]) {
        
        tabbartxt.textColor = [Monitor colorWithHexString:@"0x31bd80" alpha:1.0f];
        [tabbartxt.layer setBorderColor:[Monitor colorWithHexString:@"0x31bd80" alpha:1.0f].CGColor];//边框颜色
    }
    if ([pcid isEqualToString:@"10"]) {
        
        tabbartxt.textColor = [Monitor colorWithHexString:@"0xd96ce6" alpha:1.0f];
        [tabbartxt.layer setBorderColor:[Monitor colorWithHexString:@"0xd96ce6" alpha:1.0f].CGColor];//边框颜色
    }
    if ([pcid isEqualToString:@"17"]) {
        
        tabbartxt.textColor = [Monitor colorWithHexString:@"0x67af3f" alpha:1.0f];
        [tabbartxt.layer setBorderColor:[Monitor colorWithHexString:@"0x67af3f" alpha:1.0f].CGColor];//边框颜色
    }
    if ([pcid isEqualToString:@"21"]) {
        
        tabbartxt.textColor = [Monitor colorWithHexString:@"0x1b83d2" alpha:1.0f];
        [tabbartxt.layer setBorderColor:[Monitor colorWithHexString:@"0x1b83d2" alpha:1.0f].CGColor];//边框颜色
    }
    if ([pcid isEqualToString:@"28"]) {
        
        tabbartxt.textColor = [Monitor colorWithHexString:@"0xff4e49" alpha:1.0f];
        [tabbartxt.layer setBorderColor:[Monitor colorWithHexString:@"0xff4e49" alpha:1.0f].CGColor];//边框颜色
    }
    if ([pcid isEqualToString:@"52"]) {
        
        tabbartxt.textColor = [Monitor colorWithHexString:@"0xf37168" alpha:1.0f];
        [tabbartxt.layer setBorderColor:[Monitor colorWithHexString:@"0xf37168" alpha:1.0f].CGColor];//边框颜色
    }
}


@end
